// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é TypeScript –∫–æ–¥–∞

const { computeLayout } = require('./dist/src/core/layout.js');
const { usersSample, linksSample } = require('./dist/tests/sample-data.js');

const layoutOptions = {
  rootId: 1,
  cardW: 220,
  cardH: 250,
  hGap: 40,
  vGap: 80,
  spouseGutter: 30,
  failOnUnknownIds: true,
};

console.log('üå≥ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ê –°–ï–ú–ï–ô–ù–û–ì–û –î–ï–†–ï–í–ê\n');

try {
  const result = computeLayout(usersSample, linksSample, layoutOptions);

  console.log('‚úÖ –†–∞—Å—á–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  console.log(`üìä –†–∞–∑–º–µ—â–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.length}\n`);

  // –ü—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  result
    .sort((a, b) => a.level - b.level || a.x - b.x)
    .forEach((node) => {
      const { user, x, y, level, badgeRu } = node;
      console.log(
        `${user.firstName} ${user.lastName}: (${x}, ${y}) - ${badgeRu} [—É—Ä–æ–≤–µ–Ω—å ${level}]`
      );
    });
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ:', error.message);
}

console.log(
  '\nüìù –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ demo-layout.ts'
);
console.log('   npm run build && node dist/demo-layout.js');
